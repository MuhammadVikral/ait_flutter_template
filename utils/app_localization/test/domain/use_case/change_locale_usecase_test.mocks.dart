// Mocks generated by Mockito 5.3.2 from annotations
// in app_localization/test/domain/use_case/change_locale_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i2;

import 'package:app_localization/src/domain/repositories/locale_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocale_0 extends _i1.SmartFake implements _i2.Locale {
  _FakeLocale_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocaleRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocaleRepository extends _i1.Mock implements _i3.LocaleRepository {
  @override
  _i4.Future<void> save(_i2.Locale? locale) => (super.noSuchMethod(
        Invocation.method(
          #save,
          [locale],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i2.Locale get() => (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValue: _FakeLocale_0(
          this,
          Invocation.method(
            #get,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeLocale_0(
          this,
          Invocation.method(
            #get,
            [],
          ),
        ),
      ) as _i2.Locale);
  @override
  _i4.Future<_i2.Locale> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue: _i4.Future<_i2.Locale>.value(_FakeLocale_0(
          this,
          Invocation.method(
            #load,
            [],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Locale>.value(_FakeLocale_0(
          this,
          Invocation.method(
            #load,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Locale>);
}
